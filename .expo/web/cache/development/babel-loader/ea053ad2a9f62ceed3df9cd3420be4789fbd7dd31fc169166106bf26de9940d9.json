{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React from 'react';\nimport { Toucha } from \"react-native-web/dist/index\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport { useFonts } from 'expo-font';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nfunction ConstInput(_ref) {\n  var secureTextEntry = _ref.secureTextEntry,\n    marginBottom = _ref.marginBottom,\n    textAlign = _ref.textAlign,\n    placeholder = _ref.placeholder,\n    text = _ref.text,\n    editable = _ref.editable,\n    marginTop = _ref.marginTop,\n    autoCapitalize = _ref.autoCapitalize,\n    value = _ref.value;\n  var _useFonts = useFonts({\n      'Roboto-Light': require(\"./../../assets/fonts/Roboto-Light.ttf\")\n    }),\n    _useFonts2 = _slicedToArray(_useFonts, 1),\n    fontsLoaded = _useFonts2[0];\n  if (!fontsLoaded) {\n    return null;\n  }\n  return _jsxs(_Fragment, {\n    children: [_jsx(Text, {\n      style: {\n        fontSize: 10,\n        color: \"white\",\n        fontFamily: \"Roboto-Light\",\n        marginLeft: 7,\n        marginTop: marginTop\n      },\n      children: text\n    }), _jsx(TextInput, {\n      value: value,\n      placeholder: placeholder,\n      placeholderTextColor: \"white\",\n      autoCapitalize: autoCapitalize,\n      editable: editable,\n      secureTextEntry: secureTextEntry,\n      style: {\n        color: \"white\",\n        borderBottomWidth: 0.9,\n        borderRadius: 10,\n        padding: 10,\n        borderColor: \"white\",\n        fontSize: 17,\n        width: \"100%\",\n        textAlign: textAlign,\n        marginBottom: marginBottom\n      }\n    })]\n  });\n}\nexport default ConstInput;","map":{"version":3,"names":["React","Toucha","Text","TextInput","useFonts","jsx","_jsx","Fragment","_Fragment","jsxs","_jsxs","ConstInput","_ref","secureTextEntry","marginBottom","textAlign","placeholder","text","editable","marginTop","autoCapitalize","value","_useFonts","require","_useFonts2","_slicedToArray","fontsLoaded","children","style","fontSize","color","fontFamily","marginLeft","placeholderTextColor","borderBottomWidth","borderRadius","padding","borderColor","width"],"sources":["C:/Users/SAGRADO/Desktop/citisafemob/src/components/ConstInput.js"],"sourcesContent":["import React from 'react';\r\nimport { Toucha } from 'react-native';\r\nimport { Text, TextInput } from 'react-native';\r\nimport { useFonts } from 'expo-font';\r\n\r\nfunction ConstInput({ secureTextEntry, marginBottom, textAlign, placeholder, text, editable,  marginTop, autoCapitalize, value}) {\r\n\r\n    const [fontsLoaded] = useFonts({\r\n        'Roboto-Light': require('./../../assets/fonts/Roboto-Light.ttf'),\r\n      });\r\n    \r\n      if (!fontsLoaded) {\r\n        return null;\r\n      }\r\n\r\n    return (\r\n        <>\r\n                <Text style={{fontSize: 10, color: \"white\", fontFamily:\"Roboto-Light\", marginLeft: 7, marginTop:marginTop}}>{text}</Text>\r\n                <TextInput \r\n                        value={value} \r\n                        placeholder={placeholder} \r\n                        placeholderTextColor=\"white\" \r\n                        autoCapitalize={autoCapitalize}  \r\n                        editable={editable} \r\n                        secureTextEntry={secureTextEntry}\r\n                style=\r\n                    {{\r\n                        color:\"white\", \r\n                        borderBottomWidth: 0.9, \r\n                        borderRadius: 10, \r\n                        padding: 10, \r\n                        borderColor:\"white\", \r\n                        fontSize: 17, \r\n                        width: \"100%\",\r\n                        textAlign: textAlign,\r\n                        marginBottom: marginBottom\r\n                    }}\r\n                    ></TextInput>\r\n            </>\r\n        \r\n    );\r\n}\r\n\r\nexport default ConstInput;"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AAAC,SACjBC,MAAM;AAAA,OAAAC,IAAA;AAAA,OAAAC,SAAA;AAEf,SAASC,QAAQ,QAAQ,WAAW;AAAC,SAAAC,GAAA,IAAAC,IAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAAA,SAAAC,IAAA,IAAAC,KAAA;AAErC,SAASC,UAAUA,CAAAC,IAAA,EAA8G;EAAA,IAA3GC,eAAe,GAAAD,IAAA,CAAfC,eAAe;IAAEC,YAAY,GAAAF,IAAA,CAAZE,YAAY;IAAEC,SAAS,GAAAH,IAAA,CAATG,SAAS;IAAEC,WAAW,GAAAJ,IAAA,CAAXI,WAAW;IAAEC,IAAI,GAAAL,IAAA,CAAJK,IAAI;IAAEC,QAAQ,GAAAN,IAAA,CAARM,QAAQ;IAAGC,SAAS,GAAAP,IAAA,CAATO,SAAS;IAAEC,cAAc,GAAAR,IAAA,CAAdQ,cAAc;IAAEC,KAAK,GAAAT,IAAA,CAALS,KAAK;EAE1H,IAAAC,SAAA,GAAsBlB,QAAQ,CAAC;MAC3B,cAAc,EAAEmB,OAAO,wCAAwC;IACjE,CAAC,CAAC;IAAAC,UAAA,GAAAC,cAAA,CAAAH,SAAA;IAFGI,WAAW,GAAAF,UAAA;EAIhB,IAAI,CAACE,WAAW,EAAE;IAChB,OAAO,IAAI;EACb;EAEF,OACIhB,KAAA,CAAAF,SAAA;IAAAmB,QAAA,GACQrB,IAAA,CAACJ,IAAI;MAAC0B,KAAK,EAAE;QAACC,QAAQ,EAAE,EAAE;QAAEC,KAAK,EAAE,OAAO;QAAEC,UAAU,EAAC,cAAc;QAAEC,UAAU,EAAE,CAAC;QAAEb,SAAS,EAACA;MAAS,CAAE;MAAAQ,QAAA,EAAEV;IAAI,CAAO,CAAC,EACzHX,IAAA,CAACH,SAAS;MACFkB,KAAK,EAAEA,KAAM;MACbL,WAAW,EAAEA,WAAY;MACzBiB,oBAAoB,EAAC,OAAO;MAC5Bb,cAAc,EAAEA,cAAe;MAC/BF,QAAQ,EAAEA,QAAS;MACnBL,eAAe,EAAEA,eAAgB;MACzCe,KAAK,EACA;QACGE,KAAK,EAAC,OAAO;QACbI,iBAAiB,EAAE,GAAG;QACtBC,YAAY,EAAE,EAAE;QAChBC,OAAO,EAAE,EAAE;QACXC,WAAW,EAAC,OAAO;QACnBR,QAAQ,EAAE,EAAE;QACZS,KAAK,EAAE,MAAM;QACbvB,SAAS,EAAEA,SAAS;QACpBD,YAAY,EAAEA;MAClB;IAAE,CACU,CAAC;EAAA,CACnB,CAAC;AAGf;AAEA,eAAeH,UAAU"},"metadata":{},"sourceType":"module","externalDependencies":[]}